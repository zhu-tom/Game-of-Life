{"version":3,"sources":["components/game.js","index.js"],"names":["Game","state","height","width","board","initializeBoard","sim","mouseDown","lastPos","x","y","numTicks","canvas","React","createRef","tick","bind","toggleSim","handleClickCell","handleMouseOver","handleMouseDown","handleMouseUp","timer","setInterval","i","j","Math","random","clearInterval","this","setState","stopSim","Array","from","length","event","getMousePos","prevState","clientX","clientY","current","getBoundingClientRect","top","left","floor","e","map","row","col","neighbours","findNeighbours","currBoard","k","l","ctx","getContext","clearRect","forEach","fillRect","strokeRect","ref","onMouseMove","onClick","onMouseDown","onMouseUp","handleClickReset","handleClickClear","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9b8749c6.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nexport default class Game extends Component {\n    constructor() {\n        super();\n        this.state = {\n            height: 50,\n            width: 70,\n            board: this.initializeBoard(50, 70),\n            sim: true,\n            mouseDown: false,\n            lastPos: {x: null, y: null},\n            numTicks: 0\n        }\n        this.canvas = React.createRef();\n        this.tick = this.tick.bind(this);\n        this.toggleSim = this.toggleSim.bind(this);\n        this.handleClickCell = this.handleClickCell.bind(this);\n        this.handleMouseOver = this.handleMouseOver.bind(this);\n        this.handleMouseDown = this.handleMouseDown.bind(this);\n        this.handleMouseUp = this.handleMouseUp.bind(this);\n        this.timer = setInterval(this.tick, 100);\n    }\n\n    initializeBoard(height, width) {\n        let board = [];\n        for (let i = 0; i < height; i++) {\n            board[i] = [];\n            for (let j = 0; j < width; j++) {\n                board[i][j] = Math.random() >= 0.5;\n            }\n        }\n        return board;\n    }\n\n    stopSim() {\n        clearInterval(this.timer);\n        this.setState({numTicks: 0});\n    }\n\n    handleClickClear() {\n        this.stopSim();\n        this.setState({sim: false, board: Array.from({length: this.state.height}, ()=>Array.from({length: this.state.width}, ()=>false))});\n    }\n\n    handleClickReset() {\n        this.stopSim();\n        this.setState({sim: false, board: this.initializeBoard(this.state.height, this.state.width)});\n    }\n\n    handleClickCell(event) {\n        const {x, y} = this.getMousePos(event);\n        this.setState(prevState=>{\n            prevState.board[y][x] = !prevState.board[y][x];\n            return {board: prevState.board};\n        });\n    }\n\n    getMousePos(event) {\n        let {clientX, clientY} = event;\n        const {top, left} = this.canvas.current.getBoundingClientRect();\n        clientX = Math.floor((clientX-left)/10);\n        clientY = Math.floor((clientY-top)/10);\n        return {x: clientX, y: clientY};\n    }\n\n    handleMouseOver(e) {\n        const event = e;\n        const {x, y} = this.getMousePos(event);\n        if (!(x === this.state.lastPos.x && y === this.state.lastPos.y)) {            \n            this.setState({lastPos: {x: x, y: y}});\n            if (this.state.mouseDown === true) {\n                this.handleClickCell(event);\n            }\n        }\n        \n    }\n\n    handleMouseDown(event) {\n        this.handleClickCell(event);\n        this.setState({mouseDown: true});\n    }\n\n    handleMouseUp(event) {\n        this.handleClickCell(event);\n        this.setState({mouseDown: false});\n    }\n\n    // printCells() {\n    //     return this.state.board.map((row, i)=><tr>{row.map((cell, j)=><td id={i + ',' + j} className={cell === true ? 'alive': 'undefined'} onMouseOver={this.handleMouseOver} onClick={this.handleClickCell} onMouseDown={()=>this.handleMouseDown()} onMouseUp={()=>this.handleMouseUp()}></td>)}</tr>);\n    // }\n\n    tick() {\n        this.setState(prevState=>({numTicks: this.state.numTicks + 1, board: prevState.board.map((row, i)=>row.map((col, j)=>{\n            let neighbours = this.findNeighbours(i, j);\n            if (col === true) {\n                return neighbours === 2 || neighbours === 3;\n            } else {\n                return neighbours === 3;\n            }\n        }))}));\n    }\n\n    findNeighbours(i, j) {\n        let neighbours = 0;\n        let currBoard = this.state.board;\n        for (let k = -1; k < 2; k++) {\n            for (let l = -1; l < 2; l++) {\n                const row = i + k;\n                const col = j + l;\n                if (!(row < 0 || row >= currBoard.length || col < 0 || col >= currBoard[i].length)) {\n                    if (!(k === 0 && l === 0) && currBoard[row][col] === true) {\n                        neighbours++;\n                    }\n                }  \n            }\n        }\n        return neighbours;\n    }\n\n    toggleSim() {\n        if (this.state.sim === false) {\n            this.timer = setInterval(this.tick, 100);\n        } else {\n            clearInterval(this.timer);\n        }\n        this.setState(prevState=>({sim: !prevState.sim}));\n    }\n\n    componentDidUpdate() {\n        const ctx = this.canvas.current.getContext('2d');\n        ctx.clearRect(0, 0, this.canvas.current.width, this.canvas.current.height);\n        this.state.board.forEach((row,i)=>{\n            row.forEach((col, j)=>{\n                col ? ctx.fillRect(j*10,i*10, 10, 10) : ctx.strokeRect(j*10,i*10,10,10);\n            });\n        });\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>John Conway's Game of Life</h1>\n                <canvas \n                    ref={this.canvas} \n                    onMouseMove={this.handleMouseOver} \n                    onClick={this.handleClickCell} \n                    onMouseDown={this.handleMouseDown}\n                    onMouseUp={this.handleMouseUp}\n                    width={this.state.width*10} \n                    height={this.state.height*10}/>\n                <div>\n                    <button onClick={this.toggleSim}>{this.state.sim ? 'Pause':'Play'}</button>\n                    <button onClick={()=>this.handleClickReset()}>Reset</button>\n                    <button onClick={()=>this.handleClickClear()}>Clear</button>\n                    <p>Simulations: {this.state.numTicks}</p>\n                </div>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './components/game';\nimport './styles.css';\n\nReactDOM.render(<Game/>, document.getElementById('root'));"],"sourceRoot":""}